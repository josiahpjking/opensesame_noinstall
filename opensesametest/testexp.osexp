---
API: 2
OpenSesame: 3.0.7
Platform: nt
---
set width 1920
set uniform_coordinates no
set title "New experiment"
set subject_parity even
set subject_nr 0
set start experiment
set sampler_backend legacy
set mouse_backend legacy
set keyboard_backend legacy
set height 1080
set foreground "#000000"
set font_size 18
set font_italic no
set font_family mono
set font_bold no
set experiment_path "F:/test"
set description "Default description"
set coordinates uniform
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend legacy
set bidi no
set background "#ffffff"

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run new_inline_script always
	run new_pygaze_init always
	run new_inline_script_6 always
	run new_loop always

define inline_script new_inline_script
	set description "Executes Python code"
	___run__
	from openexp.canvas import canvas
	from openexp.mouse import mouse
	from openexp.keyboard import keyboard
	#import pandas
	global my_canvas, my_mouse, my_keyboard
	my_canvas = canvas(exp, bgcolor='white')
	my_mouse = mouse(exp, visible=True)
	my_keyboard = keyboard(exp, keylist=['SPACE'])
	my_canvas.show()
	
	global xc, yc
	xc = self.get('width') / 2
	yc = self.get('height') / 2
	var.set("xcent", xc)
	var.set("ycent",yc)
	
	
	
	
	
	
	my_canvas.clear()
	my_canvas.text('backend seems to function \n press space to init pygaze.')
	my_canvas.show()
	my_keyboard.get_key()
	__end__
	set _prepare ""

define inline_script new_inline_script_1
	set description "Executes Python code"
	___run__
	my_canvas.clear()
	my_canvas.text('pygaze is recording, \n press space')
	my_canvas.show()
	my_keyboard.get_key()
	conn = exp.pygaze_eyetracker.connected
	
	print conn
	smp = eyetracker.sample()
	print smp
	__end__
	set _prepare ""

define inline_script new_inline_script_2
	set description "Executes Python code"
	___run__
	my_canvas.clear()
	my_canvas.text(' press space to start pygaze recording ')
	my_canvas.show()
	my_keyboard.get_key()
	eyetracker.start_recording()
	__end__
	set _prepare ""

define inline_script new_inline_script_3
	set description "Executes Python code"
	___run__
	# Wait for a 'z' or 'x' key with a timeout of 3000 ms
	my_keyboardb = keyboard(exp, keylist=['z', 'x'], timeout=3000)
	start_time = clock.time()
	my_canvas.clear()
	my_canvas.text('press z or x within 2 seconds.')
	my_canvas.show()
	my_keyboardb.get_key()
	exp.pygaze_eyetracker.log("pressed z or x")
	key, end_time = my_keyboardb.get_key()
	var.response = key
	var.response_time = end_time - start_time
	__end__
	set _prepare ""

define inline_script new_inline_script_4
	set description "Executes Python code"
	___run__
	my_keyboard = keyboard(exp, keylist=['SPACE'])
	my_canvas.clear()
	my_canvas.text('press space to stop recording and log vars to tracker')
	my_canvas.show()
	my_keyboard.get_key()
	eyetracker.stop_recording()
	eyetracker.close()
	__end__
	set _prepare ""

define inline_script new_inline_script_5
	set description "Executes Python code"
	___run__
	my_keyboard = keyboard(exp, keylist=['SPACE'])
	my_canvas.clear()
	my_canvas.text('congrats! no crashing.')
	my_canvas.show()
	my_keyboard.get_key()
	__end__
	set _prepare ""

define inline_script new_inline_script_6
	set description "Executes Python code"
	___run__
	#eyetracker.calibrate()
	#exp.pygaze_eyetracker.log("start_recording")
	
	my_canvas.clear()
	my_canvas.text('pygaze initialised \n press space to perform drift correct. ')
	my_canvas.show()
	my_keyboard.get_key()
	#print conn
	__end__
	set _prepare ""

define inline_script new_inline_script_7
	set description "Executes Python code"
	___run__
	my_canvas.clear()
	my_mouse.set_visible(visible = False)
	my_canvas.fixdot(color='red')
	my_canvas.show()
	self.sleep(500)
	__end__
	set _prepare ""

define logger new_logger
	set description "Logs experimental data"
	set auto_log yes

define loop new_loop
	set skip 0
	set repeat 1
	set order random
	set offset no
	set item new_sequence
	set description "Repeatedly runs another item"
	set cycles 1
	set column_order ""
	set break_if never
	run new_sequence

define pygaze_drift_correct new_pygaze_drift_correct
	set ypos "[ycent]"
	set xpos "[xcent]"
	set target_style default
	set target_color "[foreground]"
	set fixation_triggered yes
	set draw_target yes
	set description "Perform eye-tracker drift correction"

define pygaze_init new_pygaze_init
	set tracker_type SMI
	set smi_send_port 4444
	set smi_recv_port 5555
	set smi_ip "127.0.0.1"
	set sacc_vel_thr 35
	set sacc_acc_thr 9500
	set eyelink_pupil_size_mode area
	set eyelink_force_drift_correct yes
	set description "Initialize and calibrate eye tracker"
	set calibrate yes
	set calbeep yes
	set _logfile automatic

define pygaze_log new_pygaze_log
	set throttle 2
	__msg__
	!V TRIAL_VAR response [response]
	!V TRIAL_VAR response_time [response_time]
	__end__
	set description "Writes information to the eye-tracker logfile"
	set auto_log no

define pygaze_start_recording new_pygaze_start_recording
	set status_msg start_trial
	set description "Puts the eye tracker into recording mode"

define pygaze_stop_recording new_pygaze_stop_recording
	set status_msg stop_trial
	set description "Stops recording of eye tracking data"

define sequence new_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run new_pygaze_drift_correct always
	run new_inline_script_7 always
	run new_inline_script_2 always
	run new_pygaze_start_recording never
	run new_inline_script_1 always
	run new_inline_script_3 always
	run new_inline_script_4 always
	run new_pygaze_log always
	run new_pygaze_stop_recording never
	run new_inline_script_5 always
	run new_logger always

